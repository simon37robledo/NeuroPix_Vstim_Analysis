%path = '\\sil3\data\\Large_scale_mapping_NP\lizards\PV139\PV139_Experiment_6_2_24\Insertion1\catgt_PV139_Experiment_6_2_24_1_g0';
path = '\\sil3\data\\Large_scale_mapping_NP\lizards\PV139\PV139_Experiment_20_2_24\Insertion2\catgt_PV59_Experiment_20_2_24_2_g0';

path = '\\sil3\data\\Large_scale_mapping_NP\lizards\PV139\PV139_Experiment_6_2_24\Insertion1\catgt_PV139_Experiment_6_2_24_1_g0';
%NP = NPAPRecording(path);

path = '\\sil3\data\\Large_scale_mapping_NP\lizards\PV32\PV32_Experiment_18_3_24\Insertion1\catgt_PV32_Experiment_18_3_24_1_g0';


basic_pathPV102 = '\\132.66.45.127\data\Large_scale_mapping_NP\\Immobilized_exp\PV102';
expPV102 = 'PV102_experiment_18_7_23';

basic_pathPV103 = '\\132.66.45.127\data\Large_scale_mapping_NP\\Immobilized_exp\PV103';
expPV103 = 'PV103_Experiment_12_6_23';

basic_pathPV67 = '\\132.66.45.127\data\Large_scale_mapping_NP\\Immobilized_exp\PV67';
expPV67= 'PV67_experiment_5_7_23';

basic_pathPV27 = '\\132.66.45.127\data\Large_scale_mapping_NP\\Immobilized_exp\PV27';
expPVPV27 = 'PV27_Experiment_25_6_23';

basic_pathPV139 = '\\sil3\data\Large_scale_mapping_NP\lizards\PV139';
expPV139 = 'PV139_Experiment_6_2_24';

basic_pathPV59 = '\\sil3\data\Large_scale_mapping_NP\lizards\PV59';
expPV59 = 'PV59_Experiment_20_2_24';

basic_pathPV32 = '\\sil3\data\Large_scale_mapping_NP\lizards\PV32';
expPV32 = 'PV32_Experiment_18_3_24';

basicPathA = {basic_pathPV67,basic_pathPV103,basic_pathPV27,basic_pathPV139,basic_pathPV59,basic_pathPV32};

expA = {expPV67,expPV103,expPVPV27,expPV139,expPV59,expPV32};

MBttl_Index = {2,2,2,[1,2],1,1};

a =2;
in ="7";

path = convertStringsToChars(string(basicPathA{a})+string(filesep)+string(expA{a})+string(filesep)+"Insertion"+...
                in+string(filesep)+"catgt_"+string(expA{a})+"_"+in+"_g0");

NP = NPAPRecording(path); 

%%


%%%Moving ball inputs, NP, stimOn, stimOff, plots, neuron, ttlIndex


patternIndex = strfind(string(NP.recordingDir), "\catgt");

endIndex = patternIndex(1)-1;
stimDir = string(NP.recordingDir);
stimDir = extractBetween(stimDir,1,endIndex);

file = dir (stimDir);
filenames = {file.name};


file = dir (stimDir);
filenames = {file.name};
ballFiles = filenames(contains(filenames,"linearlyMovingBall"));
directions = [];
offsets = [];
sizes = [];
speeds = [];

j =1;
if size(ballFiles) ~= [0 0]

    for i = ballFiles
        ball= load(stimDir+"\"+string(i));

        directions = [directions cell2mat(ball.VSMetaData.allPropVal(17))];

        offsets = [offsets cell2mat(ball.VSMetaData.allPropVal(18))];

        sizes = [sizes cell2mat(ball.VSMetaData.allPropVal(19))];

        speeds = [speeds cell2mat(ball.VSMetaData.allPropVal(16))];

        direcNames = unique(directions);

        stimDurStats = cell2mat(ball.VSMetaData.allPropVal(38))*1000;
        interStimStats = cell2mat(ball.VSMetaData.allPropVal(28))*1000;

        j = j+1;
    end
    disp('Visual stats extracted!')
else
    disp('Directory does not exist!');
end

%% Triggers:

ttlInd = MBttl_Index{a};

[stimOn stimOff onSync offSync] = NPdiodeExtract(NP,1,"MovBall",ttlInd,16,0); 

%%Put channels into diode extract function

[stimOn stimOff onSync offSync] = NPdiodeExtract(NP,1,"MovBall",ttlInd,16,0);%%Change diode function so that it checks if the files exist
 
% onSync(onSync >=onsetSync(1) & onSync <=offsetSync(1))
% 
% [Ttrigger,chNumberT]=NP.getTrigger();
% 
%  Sstart = [Ttrigger{1}];
%  Send = [Ttrigger{2}];
%  onset = [Ttrigger{3}];
%  offset = [Ttrigger{4}];
% 
%  %Send = Send(2:end); %For mouse1\Mice_exp_29_11_23\Insertion2\catgt_Mice_exp_29_11_23_2_g0
% 
%  ttl_index = 2;
% 
%  stimOn = [];
%  stimOff = [];
%  stimInter = [];
%  j =1;
% 
% 
%  for i=ttl_index
%      stimUp = onset(onset > Sstart(i) & onset < Send(i));
%      stimOn = [stimOn stimUp]; %general
% 
%      stimDown = offset(offset > Sstart(i) & offset < Send(i));
%      stimOff = [stimOff stimDown]; %general
% 
%      stimInter = [stimInter mean(stimOff-stimOn)];
% 
%      %ttlNum(j) = length(stim(1:2:end)); %sanity check to see how many stimulus presentations there are per round
% 
%      j = j+1;
%  end

%%
% %Check diode
% for i = 1:length(stimOn)
% 
%     Lon = length(onSync(onSync>=stimOn(i) & onSync<=stimOff(i)));
% 
%     Loff = length(offSync(offSync>=stimOn(i) & offSync<=stimOff(i)));
% 
%     if Lon ~= 77 || Loff ~= 77
% 
%         2+2
% 
%     end
% 
%     a = NP.getAnalogData(1,stimOn(i)-500,4000);
% 
%     figure;plot(squeeze(a));
%     xline((onSync(onSync>=stimOn(i) & onSync<=stimOff(i))-stimOn(i)-500)*NP.samplingFrequencyNI/1000)
% 
% end


stimDur = mean(-stimOn+stimOff);

A = [stimOn directions' offsets' sizes' speeds'];

C = sortrows(A,[2 3 4 5]);

%Sort directions:

directimesSorted = C(:,1)';



%%
cluster_info = readtable(string(NP.recordingDir) + "\cluster_info.tsv",  "FileType","text",'Delimiter', '\t');

%Good units

GoodU_or = cluster_info.cluster_id(cluster_info.group=="good");

GoodU_orDepth = cluster_info.depth(cluster_info.group=="good");

p = NP.convertPhySorting2tIc(NP.recordingDir);

%Select good units
label = string(p.label');

goodU = p.ic(:,label == 'good');

bin = 50;
preBase = interStimStats/2;

[Mr] = BuildBurstMatrix(goodU,round(p.t/bin),round((directimesSorted-preBase)/bin),round((stimDur+preBase*2)/bin));
[nT,nN,nB] = size(Mr);
[Mb] = BuildBurstMatrix(goodU,round(p.t/bin),round((directimesSorted-interStimStats)/bin),round((interStimStats)/bin));

baseline = squeeze(mean(squeeze(mean(Mb)),2));

MrMean = squeeze(mean(Mr));

v_replicated = repmat(baseline, 1, size(MrMean, 2));

Norm = MrMean ./ v_replicated;

Norm(Norm>2) = 2; 

%%

fig = figure();
imagesc(Norm);
xline(preBase/bin,'k', LineWidth=1.5)
xline(stimDur/bin+preBase/bin,'k',LineWidth=1.5)
hcb = colorbar();
title(hcb,'SpkR/Baseline');
xticks([0.5 (preBase/bin):10:nB])
xticklabels([-preBase 0:10*bin:nB*bin])
ylabel('Neurons');xlabel('Time (ms)');
% Define key colors: blue, white, yellow
keyColors = [0 0 0.5; 1 1 1;[0 0.5 0]]; % RGB for blue, white, yellow
% Number of colors to interpolate between each key color
nInterpolations = 32;
% Interpolate colors between blue and white
blueToWhite = interp1([1,2], keyColors(1:2,:), linspace(1,2,nInterpolations));
% Interpolate colors between white and yellow
whiteToYellow = interp1([1,2], keyColors(2:3,:), linspace(1,2,nInterpolations));
% Combine the two gradients, omitting one instance of white to maintain 64 colors
customColormap = [blueToWhite; whiteToYellow(2:end,:)];
% Apply the custom colormap
colormap(customColormap);
cd(NP.recordingDir)
if ~exist(path+"\Figs",'dir')
    mkdir Figs
end
cd(NP.recordingDir + "\Figs")
print(fig, sprintf('%s-MovBall-summary.png',NP.recordingName),'-dpng');
close

%%
%%%%%%%Baseline

stims = stimOn';

%Select biggest response baseline

preBase =500;

basePresp = preBase+stimDur;

[Mb] = BuildBurstMatrix(goodU,round(p.t/bin),round((stims-preBase)/bin),round((preBase)/bin));

Mb = mean(Mb,3);


[trials, neurons] = size(Mb);

%             MbC = zeros(trials, neurons);

percentTrials = round(trials*0.2);



[S, Sindex] = sort(Mb);

% Mb = S(1:end-percentTrials,:);

[trials, neurons] = size(Mb);

%randomize again.
Mb = Mb(randi([1, size(Mb,1)], 1, size(Mb,1)),:);

%Take mean across window of % of trials

MbC = zeros(round(trials/percentTrials), neurons);

for i = 1:percentTrials:trials


    meanb = mean(Mb(i:min(i+percentTrials-1, end),:),1);

    MbC(j,:) = meanb;

    j = j+1;

end


% Mb = Mb(Sindex);

spkRateBM = mean(MbC);
%%%% Convolute matrix:
%%%1. Convolute in the 3rd dimension (trials)


[MrC]=ConvBurstMatrix(Mr,fspecial('gaussian',[1 5],3),'same');

[nT,nN,nB] = size(MrC);

trialDivision = nT/(length(unique(offsets))*length(unique(directions))*length(unique(sizes))*length(unique(speeds)));


%%% end of convolution

%%%%Create window of 2 offsets by 10 bins (500 ms) to scan

window_size = [trialDivision, 50];

% Initialize the maximum mean value and its position %No
% need or concolutions.

max_position = zeros(nN,2);
max_mean_value = zeros(1,nN);

for u =1:nN
    % Slide the window over the matrix
    %unit matrix
    max_mean_value(u) = -Inf;
    for d = 1:length(unique(offsets))*trialDivision:nT
        uM = squeeze(MrC(d:d+length(unique(offsets))*trialDivision-1,u,:));
        for i = 1:size(uM, 1) - window_size(1) + 1
            for j = 1:size(uM, 2) - window_size(2) + 1
                % Extract the sub-matrix
                sub_matrix = uM(i:min(i+window_size(1)-1, end), j:min(j+window_size(2)-1,end));

                % Compute the mean value
                mean_value = mean(sub_matrix(:));

                % Update the maximum mean value and its position
                if mean_value > max_mean_value(u)
                    max_mean_value(u) = mean_value;
                    max_position(u,:) = [i+d-1, j];

                end

            end
        end
    end
end

spkRateR = max_mean_value;

epsilon = 0.01;

denom = mad(MbC,0)+epsilon; %mean(Mb,0)+epsilon; %

mSpk = mean(spkRateR);

Zscore = (spkRateR - (spkRateBM + spkRateR)/2)./denom;

RespU = GoodU_or(Zscore>3);
RespUInd =  find(Zscore>3);


sDirections = sort(directions);

tunning = sDirections(max_position(:,1));



%MinusRB = (mean(spkRateR) -(mean(spkRateB)))./(mean(spkRateR) + (mean(spkRateB)));

MinusRB = spkRateR - spkRateBM;


%                 if a==2 & in ==1
%                     2+2
%
%                 end

categ = nT/trialDivision;
offsetN = length(unique(offsets));
direcN = length(unique(directions));
speedN = length(unique(speeds));
sizeN = length(unique(sizes));

%%  Rasters plots per Neuron 
plotexamplesMB =1;

if plotexamplesMB == 1

    eNeuron =1:length(goodU);

    orderS = [2 3 4 5;4 2 3 5;5 2 3 4;3 2 4 5];
    orderNames = {'dir_off_sizes_speeds';'sizes_dir_off_speeds';'speeds_dir_off_sizes';'off_dir_sizes_speeds'};

    A = [stimOn directions' offsets' sizes' speeds'];


    for k = 1


        C = sortrows(A,orderS(k,:));

        %Sort directions:

        directimesSorted = C(:,1)';


        [Mr] = BuildBurstMatrix(goodU,round(p.t/bin),round((directimesSorted-preBase)/bin),round((stimDur+preBase*2)/bin));

        Mr2 = [];

        for u = eNeuron

            j=1;

            mergeTrials = 4;

            if mergeTrials ~= 1

                for i = 1:mergeTrials:trials

                    meanb = mean(squeeze(Mr(i:min(i+mergeTrials-1, end),u,:)),1);

                    Mr2(j,:) = meanb;

                    j = j+1;

                end
            else
                Mr2 = Mr(:,u,:);
            end
  
            [nT,nB] = size(Mr2);

            fig = figure;

            imagesc(squeeze(Mr2));colormap(flipud(gray(64)));
            %Plot stim start:
            xline(preBase/bin,'k', LineWidth=1.5)
            %Plot stim end:
            xline(stimDur/bin+preBase/bin,'k',LineWidth=1.5)
            ylabel('Trials');xlabel('Time (ms)');
            title(sprintf('U.%d-R.%.3f-B.%.3f-S.%.3f',u,max_mean_value(u),spkRateBM(u),Zscore(u)));

            xticks([0.5 (preBase/bin):10:nB])
            xticklabels([-preBase 0:10*bin:nB*bin])
            yticklabels([yticks]*mergeTrials)
            %Directions
            v = nT/direcN:nT/direcN:nT-1;
            yline(v+0.5,'r', LineWidth=3);
            %Offsets
            v = nT/(direcN*offsetN):nT/(direcN*offsetN):nT-1;
            yline(v+0.5,'b', LineWidth=2);
            %sizes
            v = nT/(direcN*offsetN*sizeN):nT/(direcN*offsetN*sizeN):nT-1;
            yline(v+0.5, LineWidth=0.5);

            %                             hcb = colorbar();
            %                             title(hcb,'Spikes/sec');
            %caxis([0 max(0.2,max(max_mean_value(u)))])
            hold on
            %Plot rectangle:
            rectangle('Position', [max_position(u,2)/mergeTrials, max_position(u,1)/mergeTrials, window_size(2)/mergeTrials, window_size(1)/mergeTrials],...
                'EdgeColor', 'r', 'LineWidth', 1.5,'LineStyle','-.');
            hold off
            prettify_plot

            cd(NP.recordingDir)
            if ~exist(path+"\Figs",'dir')
                mkdir Figs
            end
            cd(NP.recordingDir + "\Figs")

            fig.Position = [353    42   734   954];
            print(fig, sprintf('%s-MovBall-%s-U%d-W%d-%dW.png',NP.recordingName,orderNames{k},u,window_size(1),window_size(2)),'-dpng');
            close

        end

    end
end

%% Position heatmap


A = [stimOn directions' offsets' sizes' speeds'];

C = sortrows(A,[5 2 3 4]);

sizeV = C(:,4);


%Sort directions:

directimesSorted = C(:,1)';

%%%

%Get X and Y positions

X = cell2mat(ball.VSMetaData.allPropVal(22));

Y = cell2mat(ball.VSMetaData.allPropVal(23));

% %times values of frames per trial
% 
% times = [];
% 
% for t = 1:length(directimesSorted)
% 
%     times = [times linspace(directimesSorted(t),directimesSorted(t)+round(stimDur),length(X))];
% 
% end
sizeN = length(unique(sizes));
sizeX = size(X);
%%% X Y stucture = speed, offsets, directions, frames

%%%Create a matrix with trials that have unique positions
ChangePosX = zeros(sizeX(1)*sizeX(2)*sizeX(3)*sizeN*trialDivision,sizeX(4));
ChangePosY = zeros(sizeX(1)*sizeX(2)*sizeX(3)*sizeN*trialDivision,sizeX(4));

j=1;

for sp = 1:sizeX(1) %speeds
    for of = 1:sizeX(2) %offsets
        for d = 1:sizeX(3) %directions
            
            ChangePosX(j:j+sizeN*trialDivision-1,:) = repmat(squeeze(X(sp,of,d,:))',sizeN*trialDivision,1); 

            ChangePosY(j:j+sizeN*trialDivision-1,:) = repmat(squeeze(Y(sp,of,d,:))',sizeN*trialDivision,1); 

            j = j+sizeN*trialDivision;
            
        end
    end
end



msPerFarme= round(stimDur/sizeX(4));
[Mr] = BuildBurstMatrix(goodU,round(p.t),round((directimesSorted)),round((stimDur)));
[Mbase] = BuildBurstMatrix(goodU,round(p.t),round((directimesSorted-preBase)),round((preBase)));

%% Calculate the spike sum

spikeSum = zeros(trials,length(goodU),sizeX(4));
spikeSumBase = mean(Mbase,3);


for u = 1:length(goodU)

    Mu = squeeze(Mr(:,u,:));

    j= 1;  

    for f = 1:sizeX(4)  
        
        spikeSum(:,u,f) = sum(Mu(:,1*j:min(f*msPerFarme,length(Mu))),2);

        j = f*msPerFarme;

    end
end

spikeSum = single(spikeSum);
%%
%%get videos of every trial
% Define the grid size
xAxis = 1:cell2mat(ball.VSMetaData.allPropVal(63));%63 for pv103,64 for pv67 %65 PV139 and on   %:max(X,[],'all')-min(X,[],'all')-max(sizeV)/2;

yAxis = 1:cell2mat(ball.VSMetaData.allPropVal(63));%63 PV103,64 for pv67 %65 and on   %max(Y,[],'all')-min(Y,[],'all')-max(sizeV)/2;

%respU = [9,11,12,13,15,16,17,18,19,20,21,22,23,24,25,31]; %PV139_2

%respU =[18,21,22,24,26,30,31,32,34,35,38,39,41,42,44,47,50,51,53,57,58,61,63,65,66]; %PV139_1

%respU = [66, 65, 61, 42, 24,  21]; %PV59_1

%respU = [24]; %PV32_1
%respU = [2,8,16]; %PV32_2
%respU = [45,9]; %PV32_3
%respU = [18,22,24,26,42,46,47,50,53,56,61,64,65,68,73,79,81,84,89,90,94,97,98,100,101,102,103,104,107,108,112,...
%     113,119,120,121,124,127,130,131,133,137,138,141,142,144,145,147,149,151,154,157]; %PV67_1
%respU = [115,102,77,75]; %PV67_4
%respU = [1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 17, 20, 22, 23, 24, 28, 32, 34, 36]; %PV103_1
%respU = [2,23,25,28,20,22,25,28,29,32,34,36,37,38,39,40]; %PV103_2
%respU = [3,7,10,14,15,17,18,19,20,26,33,46,50]; %PV103_3
%respU = [5,8,13];%PV103_4
%respU = [35,89];%PV103_5
%respU = [11,13,14,21,29,31,32,28,45,80,81,82]; %PV103_6
%respU = [6,18,25,29,30,32,36,37,38,44,57,78,82,]
%respU = sort(respU);

cd(NP.recordingDir + "\Figs")

fixed_delay = 1;


RFuDir = cell(1,direcN);
RFuSize = cell(1,sizeN);
RFuSpeed = cell(1,speedN);

A = [stimOn directions' offsets' sizes' speeds'];

C = sortrows(A,[5 2 3 4]);

uDir = unique(directions);
uSize = unique(sizes);
uSpeed = unique(speeds);

for i = 1:direcN
    C(C(:,2) == uDir(i),2) = i;
end
for i = 1:sizeN
    C(C(:,4) == uSize(i),4) = i;
end
for i = 1:speedN
    C(C(:,5) == uSpeed(i),5) = i;
end
%% Convolution
%respU =[144,145,147,149,151,154,157];

centerXreal = cell2mat(ball.VSMetaData.allPropVal(61));%PV139 %PV64 62 %PV103 61 
%respU = 18;
for u = 1:length(respU)
    
    RFu = zeros(length(xAxis)+1,length(yAxis)+1,sizeX(4),'single');

    for k = 1:direcN
        RFuDir{k} = zeros(length(xAxis)+1,length(yAxis)+1,sizeX(4),'single');
    end
    for k = 1:sizeN
        RFuSize{k} = zeros(length(xAxis)+1,length(yAxis)+1,sizeX(4),'single');
    end
    for k = 1:speedN
       RFuSpeed{k} = zeros(length(xAxis)+1,length(yAxis)+1,sizeX(4),'single');
    end

    for i = 1:trialDivision:trials

        videoTrials = zeros(length(xAxis)+1,length(yAxis)+1,sizeX(4),'single');
        for j = 1:sizeX(4) %%Calculate video of unique trials

            % Create a matrix of zeros representing the grid
            xyScreen = zeros(length(xAxis)+1,length(yAxis)+1,'single');

            %Define the center and radius of the circle

%             centerX = ChangePosX(i,j)-min(X,[],'all'); % X position of the center
%             centerY = ChangePosY(i,j)-min(Y,[],'all'); % Y position of the center
            centerX = ChangePosX(i,j)-(centerXreal-length(yAxis)/2); % X position of the center
            centerY = ChangePosY(i,j); % Y position of the center

            radius = sizeV(i)/2; % Radius of the circle

            % Create a meshgrid of coordinates
            [x, y] = meshgrid(1:length(xAxis)+1, 1:length(yAxis)+1);

            % Calculate the distance of each point from the center
            distances = sqrt((x - centerX).^2 + (y - centerY).^2);

            % Set the values inside the circle to 1 (or any other value you prefer)
            xyScreen(distances <= radius) = 1;

            videoTrials(:,:,j) = xyScreen;
        end

        spikeMean = mean(spikeSum(i:i+trialDivision-1,respU(u),:))-mean(Mbase(i:i+trialDivision-1,respU(u),:),'all'); %Get the mean across same trials and substract the baseline

        tic
        Co = convn(videoTrials,spikeMean,'same');
        toc
        %toc

%         spikeMean = mean(spikeSum(i:i+trialDivision-1,respU(u),:));
% 
%         tic
%         Co = convn(videoTrials,spikeMean,'same');
%         toc

        RFuDir{C(i,2)} =  RFuDir{C(i,2)}+Co;
        RFuSize{C(i,4)} = RFuSize{C(i,4)}+Co;
        RFuSpeed{C(i,5)} = RFuSpeed{C(i,5)}+Co;

        RFu = RFu+Co;
    end

    save(sprintf('RFu-%d',respU(u)),'RFu')
    save(sprintf('RFuDir-%d',respU(u)),'RFuDir','-v7.3')
    save(sprintf('RFuSize-%d',respU(u)),'RFuSize','-v7.3')
    save(sprintf('RFuSpeed-%d',respU(u)),'RFuSpeed','-v7.3')
end
%%
%Delay = 204 ms = 12 bins of 17 ms

delay = 12;
if rem(sizeX(4),2)==0
    center = sizeX(4)/2+1;
else
    center = (sizeX(4)-1)/2+1;
end

%%Search for maximal intensity
% figure
% plot([1:154],squeeze(spikeMean)')

%% Depth distribution of responses

basicPathA = {basic_pathPV67,basic_pathPV103,basic_pathPV27,basic_pathPV139,basic_pathPV59,basic_pathPV32};

expA = {expPV67,expPV103,expPVPV27,expPV139,expPV59,expPV32};

InsAnglesPV67 = [88 88 88 88];
InsDepthsPV67 = [3956 3907 4000 3934]; 
RespUnitPV67 ={[18,22,24,26,42,46,47,50,53,56,61,64,65,68,73,79,81,84,89,90,94,97,98,100,101,102,103,104,107,108,112,...
    113,119,120,121,124,127,130,131,133,137,138,141,142,144,145,147,149,151,154,157],[],[],[115,102,77,75]};

InsAnglesPV103= [70.5 70.5 70.5 70.5 70.5 70.5 70.5 ];
InsDepthsPV103= [4104.14 3964.18 4066.5 4123.87 4175.86 4225.55 4027.42]; 
RespUnitPV103={[1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 17, 20, 22, 23, 24, 28, 32, 34, 36],[2,23,25,28,20,22,25,28,29,32,34,36,37,38,39,40],...
    [],[],[],[],[]};

InsAnglesPV27= [72.5 72.5 72.5  72.5 72.5 72.5 72.5];
InsDepthsPV27= [3913.9 3904.34 3525.7 3900.1 3914.34 3739.3 3906.8];
RespUnitPV27={};

InsAnglesPV139 = [89 89];
InsDepthsPV139 = [3910 3907.23];
RespUnitPV139 = {[18,21,22,24,26,30,31,32,34,35,38,39,41,42,44,47,50,51,53,57,58,61,63,65,66],...
    [9,11,12,13,15,16,17,18,19,20,21,22,23,24,25,31]};

InsAnglesPV59 = [81 81 81];
InsDepthsPV59 = [2845.89 2858.91+500 3050.36];
RespUnitPV59 = {[66, 65, 61, 42, 24,  21],[],[]};

InsAnglesPV32 = [69 72 72];
InsDepthsPV32 = [2400 2600 2200];
RespUnitPV32 = {[24],[2,8,16],[45]};

animalD = {InsDepthsPV67,InsDepthsPV103,InsDepthsPV27,InsDepthsPV139,InsDepthsPV59,InsDepthsPV32};

animalA = {InsAnglesPV67,InsAnglesPV103,InsAnglesPV27,InsAnglesPV139,InsAnglesPV59,InsAnglesPV32};

RespUnits = {RespUnitPV67,[],[],RespUnitPV139,RespUnitPV59,RespUnitPV32};

verticalDepth = cell(2,length(animalA));

YDist = cell(2,length(animalA));
%% Depth plot
figure()
j = 1;
aj=2;
for a = [1,4:length(animalA)] %X doesn't change


    %point1 = [animals{a}(:,1),animals{a}(:,2),animals{a}(:,3)];

    verticalDepth{1,a} = sin(deg2rad(animalA{a})).*(animalD{a}); %depth of unit along vertical axis

    YDist{1,a} = cos(deg2rad(animalA{a})).*(animalD{a}); %X distance of unit from insertion

    %point2 = [animals{a}(:,1),animals{a}(:,2)+YDist',animals{a}(:,3)-verticalDepth'];

    %     for i = 1:length(animals{a})
    %         plot3([point1(i,1),point2(i,1)],[point1(i,2),point2(i,2)],[point1(i,3),point2(i,3)],'LineWidth', 1, 'Color',colorA{a})
    %         hold on
    %     end

    for in = 1:length(animalA{a})
        path = convertStringsToChars(string(basicPathA{a})+string(filesep)+string(expA{a})+string(filesep)+"Insertion"+...
            in+string(filesep)+"catgt_"+string(expA{a})+"_"+in+"_g0");

        NP = NPAPRecording(path);

        cluster_info = readtable(string(NP.recordingDir) + "\cluster_info.tsv",  "FileType","text",'Delimiter', '\t');

        %Good units

        GoodU_or = cluster_info.cluster_id(cluster_info.group=="good");

        GoodU_orDepth = cluster_info.depth(cluster_info.group=="good");

        %GoodU_orDepth = GoodU_orDepth(RespUnits{a}{in});

        verticalDepth{2,a}{in} = sin(deg2rad(animalA{a}(in)))*(animalD{a}(in) - GoodU_orDepth);

        ResponsiveDepth =  verticalDepth{2,a}{in}(RespUnits{a}{in});
        Nindex = true(1, length(verticalDepth{2,a}{in}));
        Nindex(RespUnits{a}{in}) = false;
        NonRespDepth =  verticalDepth{2,a}{in}(Nindex);

        hold on;
        plot(ones(length(ResponsiveDepth),1)+j+0.5-1+aj-2, ResponsiveDepth,'o','MarkerFaceColor','b')
        hold on; plot(ones(length(NonRespDepth),1)+j-1+aj-2, NonRespDepth,'o','MarkerFaceColor','r')

        j=j+3;
    end
aj = aj+5;
end




%% find unique pairs and their counts. Create Normalization matrix
%coords = [ChangePosX(:)-min(X,[],'all')+1,ChangePosY(:)-min(Y,[],'all')+1];
centerXreal = cell2mat(ball.VSMetaData.allPropVal(63)); %in PV139 and on
coords = [ChangePosX(:)+1-(centerXreal-length(yAxis)/2),ChangePosY(:)+1];%translate coordinates to 1080x1080


nX = max(coords(:,1));
nY = max(coords(:,2));
[Cn, ~, ic] = unique(coords, 'rows', 'stable');
counts = accumarray(ic, 1);

[x, y] = meshgrid(1:length(xAxis)+1, 1:length(yAxis)+1);

sizesU = unique(sizeV);

matrixForNorm = zeros(length(xAxis)+1, length(yAxis)+1);

for s = 1:sizeN
    % Step 3: Fill in the matrix with the counts of repeated coordinates
    for i = 1:trialDivision*sizeN:length(ChangePosX)
        matrix_nXnY = zeros(length(xAxis)+1, length(yAxis)+1);
        for tr = 1:sizeX(4)
             
%             centerX = Cn(i,1);
%             centerY = Cn(i,2);

            centerX = ChangePosX(i,tr)-(centerXreal-length(yAxis)/2);
            centerY = ChangePosY(i,tr);

            % Create a meshgrid of coordinate
            radius = sizesU(s)/2;

            % Calculate the distance of each point from the center
            distances = sqrt((x - centerX).^2 + (y - centerY).^2);

            % Set the values inside the circle to 1 (or any other value you prefer)
            matrix_nXnY(distances <= radius) =1;
           
        end
        matrixForNorm = matrixForNorm+matrix_nXnY;
    end
      
end

figure;
imagesc(matrixForNorm)
colorbar
a
%% Plot RF with a stationary delay
%to do:
%1. Standarize  the screen size to 1080 (for animal 6, bigger screen size)
%2. Detect maximum screen value per unit, and normalize, then sum across
%units. 
%3. Find better way to detect delay in convolution (max of video?). 
%4. Save result matrices. 


cd(NP.recordingDir+"\Figs")
%respU = 25;
% respU
% %respU = 157;
sideVF = 1080;%cell2mat(ball.VSMetaData.allPropVal(63)); %65 in pv139 and on

% SumAllDir = cell(2,length(animalA)); 
% SumPerDir = cell(2,length(animalA)); 
sizeScreenAn = [64,64,64,65,65,65]; %changes in the parameters order. 
%%
for a =[4]
    inSumAll = cell(1,length(animalA{a}));
    
    inSumDir = cell(2,length(animalA{a}));
    

    for in = 1:length(animalA{a})
        respU = RespUnits{a}{in};

        %generate path
        path = convertStringsToChars(string(basicPathA{a})+string(filesep)+string(expA{a})+string(filesep)+"Insertion"+...
            in+string(filesep)+"catgt_"+string(expA{a})+"_"+in+"_g0");
        NP = NPAPRecording(path);
        
        %Load stim stats
        patternIndex = strfind(string(NP.recordingDir), "\catgt");
        endIndex = patternIndex(1)-1;
        stimDir = string(NP.recordingDir);
        stimDir = extractBetween(stimDir,1,endIndex);
        file = dir (stimDir);
        filenames = {file.name};
        ballFiles = filenames(contains(filenames,"linearlyMovingBall"));
        ball= load(stimDir+"\"+string(ballFiles));
        directions = cell2mat(ball.VSMetaData.allPropVal(17));
        uDirections = unique(directions);
        sizeScreen = cell2mat(ball.VSMetaData.allPropVal(sizeScreenAn(a)));
        
        cd(path+"\Figs")

        Allu = zeros(sizeScreen+1,sizeScreen+1,length(respU));
        AlluDir = zeros(sizeScreen+1,sizeScreen+1,length(respU),length(uDirections));        

        for u =1:length(respU)
            
            %respU(u) =157;
            %sideVF = cell2mat(ball.VSMetaData.allPropVal(63)); %65 in pv139 and on

            M = load(sprintf('RFu-%d.mat',respU(u)));
            M = M.RFu;
            Mdir = load(sprintf('RFuDir-%d.mat',respU(u)));
            Mdir= Mdir.RFuDir;

            [sM1 sM2 sM3] = size(M);

            if sM1 >  sideVF+1 || sM2 >  sideVF+1

                leftPix = floor((sM1-sideVF)/2);

                rightPix = sM1-floor((sM1-sideVF)/2)-1;

                M = M(leftPix:rightPix,leftPix:rightPix,:);

            end

%             fig = figure; % Open a new figure window
%             imagesc(squeeze(M(:,:,center+delay)))%.
%             %axis equal; % Ensure the aspect ratio is equal to make the circle look r ound
%             %axis off; % Optionally, turn off the axis for a cleaner look
%             title(sprintf('U.%d-ReceptiveField-Del-%d ms',respU(u),delay*msPerFarme));
%             set(gca,'YDir','normal')
%             colorbar
%             %prettify_plot
%             cd(path+"\Figs")
%             %print(fig, sprintf('%s-MovBall-U%d-RFconv.png',NP.recordingName,respU(u)),'-dpng');
%             close

            Allu(:,:,u) = M(:,:,center+delay);

          %  t = tiledlayout(length(Mdir)/2,length(Mdir)/2);

            for direc = 1:length(Mdir)

                %nexttile; % Open a new figure window
                Md = Mdir{direc};
               % imagesc(squeeze(Md(:,:,center+delay)))%.
                %axis equal; % Ensure the aspect ratio is equal to make the circle look r ound
                %axis off; % Optionally, turn off the axis for a cleaner look
                %title(sprintf('U.%d-ReceptiveField-Del-%d ms',respU(u),delay*msPerFarme));
                %set(gca,'YDir','normal')
                %colorbar
                %caxis([0, 0.6]);
                %prettify_plot

                AlluDir(:,:,u,direc) =  Md(:,:,center+delay);
                %dirsSum{2,direc} = uDirections(direc);
                
            end     
%             cd(path+"\Figs")
%             print(fig, sprintf('%s-MovBall-U%d-RFconv.png',NP.recordingName,respU(u)),'-dpng');
%             close

        end
        inSumAll{in} =  Allu;
        inSumDir{1,in} = AlluDir;
        inSumDir{2,in} = uDirections;
    end
    SumAllDir{1,a} = inSumAll;
    SumAllDir{2,a} = expA{a};
    SumPerDir{1,a}= inSumDir;
    SumPerDir{2,a}= expA{a};
end
M = load('RFu-26.mat');
M = M.RFu;
[aaa, aaaain] = max(M,[],3);

[aa,aain] = max(aaa,[],'all');

aaaain(aain); 
fig = figure; % Open a new figure window
imagesc(squeeze(M(:,:,center+delay)))%./matrixForNorm*spkRateBM(respU));
%colormap('gray'); % Use a grayscale colormap





M = load('RFu26.mat');
M = M.RFu;

% %% Test conv center
% spikeMean(1,1,:) = zeros(1,1,154); 
% spikeMean(1,1,78) = 1; %--> center = 78 154/2+1
% C = convn(videoTrials,spikeMean,'same');



% %%Video File Test
% %M = rand(240, 320, 100);
% videoFile = 'u29.avi';
% writerObj = VideoWriter(videoFile);
% writerObj.FrameRate = 60; % Set the frame rate to 30 frames per second
% open(writerObj);
% 
% for k = 1:size(M, 3) % Loop through each frame
%     frame = M(:, :, k); % Extract the k-th frame
%     % If your data isn't uint8, you might need to normalize and convert it
%     %frame = im2uint8(mat2gray(frame)); % Normalize and convert to uint8
%     writeVideo(writerObj, frame); % Write the frame to the video
% end
% 
%    close(writerObj);
% 
%    implay(videoFile);

%%
    
% %%Iterate per neuron
% 
% for u = 1:length(goodU)
% 
%     Mu = squeeze(Mr(:,u,:));
% 
%     j= 1;
% 
%     spikeSum = zeros(trials,sizeX(4));
% 
%     for f = 1:sizeX(4)  
%         
%         spikeSum(:,f) = sum(Mu(:,1*j:min(f*msPerFarme,length(Mu))),2);
% 
%         j = f*msPerFarme;
% 
%     end
% 
%     iter = max(spikeSum,[],'all'); %iteration number
% 
%     for i = 1:iter
% 
%         [row,col] = find(spikeSum>=i);
% 
%         Ysum = ChangePosY(row,col);
%         Xsum = ChangePosX(row,col);
% 
%         X_flat = Xsum(:); % Flatten A into a column vector
%         Y_flat = Ysum(:); % Flatten B into a column vector
% 
%         % Combine into pairs
%         pairs = [X_flat, Y_flat];
% 
%         % Find unique pairs and their counts
%         [unique_pairs, ~, ic] = unique(pairs, 'rows', 'stable');
%         pair_counts = accumarray(ic, 1);
% 
%         %Transoform pair intro screen coordinates
%         x = round(unique_pairs(:,1))-round(min(X,[],'all'))+1;
%         y = round(unique_pairs(:,2))-round(min(Y,[],'all'))+1;
% 
%         for c = 1:length(pair_counts)
%             xyScreen(y(c), x(c)) = pair_counts(c);
%         end
% 
%         nGrid = 5;
%         
%         redGrid = zeros(nGrid,nGrid);
% 
%         for b = 1:nGrid
% 
%             for v = 1:nGrid
% 
%                 div = round(length(xyScreen)/nGrid);
% 
%                 redGrid(b,v) = mean(xyScreen(b*div-div+1:b*div,v*div-div+1:v*div),'all');
% 
%             end
% 
%         end
%         figure
%         
%         imagesc(redGrid);
% 
%         max(y)
% 
% 
%     end
% 
% 
%     for x = 1:length(xAxis)
%         for y = 1:lrngth(yAxis)
% 
%             xpos=find
% 
%         end
%     end
% 
% 
% 
% end
% 


